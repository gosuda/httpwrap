package httperror

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// RFC9457Error represents a Problem Details for HTTP APIs as defined in RFC9457.
// RFC9457 obsoletes RFC7807 and provides a standardized way to describe the details
// of a problem that occurred during an HTTP request with improved specifications.
//
// The RFC9457 standard defines a problem details object with the following fields:
// - Type: A URI reference that identifies the problem type
// - Title: A short, human-readable summary of the problem type
// - Status: The HTTP status code generated by the origin server
// - Detail: A human-readable explanation specific to this occurrence of the problem
// - Instance: A URI reference that identifies the specific occurrence of the problem
//
// Key improvements over RFC7807:
// - Registry for common problem type URIs (Section 4.2)
// - Clarified handling of multiple problems (Section 3)
// - Better guidance for non-dereferenceable type URIs (Section 3.1.1)
// - Updated media type handling and security considerations
//
// See: https://www.rfc-editor.org/rfc/rfc9457.html
type RFC9457Error struct {
	// Type is a URI reference that identifies the problem type.
	// When dereferenced, it SHOULD provide human-readable documentation for the problem type.
	// When this member is not present, its value is assumed to be "about:blank".
	// RFC9457 provides better guidance for non-dereferenceable URIs.
	Type string `json:"type,omitempty"`

	// Title is a short, human-readable summary of the problem type.
	// It SHOULD NOT change from occurrence to occurrence of the problem,
	// except for purposes of localization.
	// RFC9457 clarifies that this should be consistent across occurrences.
	Title string `json:"title,omitempty"`

	// Status is the HTTP status code generated by the origin server for this occurrence of the problem.
	// RFC9457 maintains the same semantics as RFC7807 for this field.
	Status int `json:"status,omitempty"`

	// Detail is a human-readable explanation specific to this occurrence of the problem.
	// RFC9457 emphasizes that this should be specific to the occurrence.
	Detail string `json:"detail,omitempty"`

	// Instance is a URI reference that identifies the specific occurrence of the problem.
	// It may or may not yield further information if dereferenced.
	// RFC9457 provides better guidance on using this field for problem tracking.
	Instance string `json:"instance,omitempty"`

	// Extensions is a map of additional members that provide information about the problem.
	// These can be application-specific or extended members from other specifications.
	// RFC9457 allows for extension members with improved guidance on their usage.
	Extensions map[string]interface{} `json:"-"`
}

// CommonProblemTypes defines a registry of common problem type URIs as suggested in RFC9457 Section 4.2.
// These provide standardized problem types that can be reused across applications.
var CommonProblemTypes = struct {
	// ValidationError represents a problem where input validation failed
	ValidationError string
	// AuthenticationRequired represents a problem where authentication is required
	AuthenticationRequired string
	// AuthorizationFailed represents a problem where authorization failed
	AuthorizationFailed string
	// ResourceNotFound represents a problem where a requested resource was not found
	ResourceNotFound string
	// ResourceConflict represents a problem where a resource conflict occurred
	ResourceConflict string
	// RateLimitExceeded represents a problem where rate limiting was triggered
	RateLimitExceeded string
	// ServiceUnavailable represents a problem where the service is temporarily unavailable
	ServiceUnavailable string
	// InternalError represents a problem where an internal server error occurred
	InternalError string
}{
	ValidationError:        "https://httpstatuses.io/400",
	AuthenticationRequired: "https://httpstatuses.io/401",
	AuthorizationFailed:    "https://httpstatuses.io/403",
	ResourceNotFound:       "https://httpstatuses.io/404",
	ResourceConflict:       "https://httpstatuses.io/409",
	RateLimitExceeded:      "https://httpstatuses.io/429",
	ServiceUnavailable:     "https://httpstatuses.io/503",
	InternalError:          "https://httpstatuses.io/500",
}

// NewRFC9457Error creates a new RFC9457Error with the specified status, title, and detail.
// The Type field is set to "about:blank" by default as per RFC9457 specification.
func NewRFC9457Error(status int, title, detail string) *RFC9457Error {
	return &RFC9457Error{
		Type:   "about:blank", // Default type as per RFC9457
		Title:  title,
		Status: status,
		Detail: detail,
	}
}

// NewRFC9457ErrorWithType creates a new RFC9457Error with a specific problem type URI.
// This is useful when using predefined problem types from the registry or custom application-specific types.
func NewRFC9457ErrorWithType(status int, typeURI, title, detail string) *RFC9457Error {
	return &RFC9457Error{
		Type:   typeURI,
		Title:  title,
		Status: status,
		Detail: detail,
	}
}

// WithType sets the Type field of the RFC9457Error and returns the error for method chaining.
// The Type field is a URI reference that identifies the problem type.
func (p *RFC9457Error) WithType(typeURI string) *RFC9457Error {
	p.Type = typeURI
	return p
}

// WithCommonType sets the Type field using a predefined common problem type and returns the error for method chaining.
// This follows RFC9457's guidance on using a registry of common problem types.
func (p *RFC9457Error) WithCommonType(commonType string) *RFC9457Error {
	p.Type = commonType
	return p
}

// WithInstance sets the Instance field of the RFC9457Error and returns the RFC9457Error.
// The Instance field is a URI reference that identifies the specific occurrence of the problem.
// RFC9457 clarifies that this field can be used for problem tracking and debugging.
// It may or may not yield further information if dereferenced.
// Example Instance values:
// - "https://example.com/accounts/12345/msgs/abc"
// - "/api/transactions/12345"
// - "urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66"
// - "trace-id:abc123def456" (for tracking purposes)
func (p *RFC9457Error) WithInstance(instance string) *RFC9457Error {
	p.Instance = instance
	return p
}

// WithExtension adds an extension property to the RFC9457Error and returns the RFC9457Error.
// Extensions are additional members that provide information about the problem.
// RFC9457 maintains support for extension members with improved guidance on their usage.
// They will be serialized in the JSON output alongside the standard fields.
// Example extensions:
// - "balance" (remaining account balance)
// - "accounts" (array of affected account numbers)
// - "retry-after" (time to wait before retrying)
// - "trace-id" (for debugging and tracking)
// - "errors" (array of detailed validation errors)
func (p *RFC9457Error) WithExtension(key string, value interface{}) *RFC9457Error {
	if p.Extensions == nil {
		p.Extensions = make(map[string]interface{})
	}
	p.Extensions[key] = value
	return p
}

// WithMultipleProblems adds support for describing multiple related problems.
// This follows RFC9457's clarified guidance on handling multiple problems (Section 3).
// The problems parameter should be an array of problem detail objects.
func (p *RFC9457Error) WithMultipleProblems(problems []interface{}) *RFC9457Error {
	return p.WithExtension("problems", problems)
}

// WithTraceID adds a trace ID for debugging and tracking purposes.
// This is a common pattern supported by RFC9457's improved guidance.
func (p *RFC9457Error) WithTraceID(traceID string) *RFC9457Error {
	return p.WithExtension("trace-id", traceID)
}

// WithRetryAfter adds retry timing information to the problem.
// This is useful for rate limiting and temporary failure scenarios.
func (p *RFC9457Error) WithRetryAfter(seconds int) *RFC9457Error {
	return p.WithExtension("retry-after", seconds)
}

// Error returns a string representation of the problem detail, implementing the error interface.
func (p *RFC9457Error) Error() string {
	return fmt.Sprintf("%d: %s - %s", p.Status, p.Title, p.Detail)
}

// StatusCode returns the HTTP status code of the problem detail.
func (p *RFC9457Error) StatusCode() int {
	return p.Status
}

// ErrorMessage returns the detail message of the problem detail.
func (p *RFC9457Error) ErrorMessage() string {
	return p.Detail
}

// IsCommonType checks if the error uses one of the predefined common problem types.
func (p *RFC9457Error) IsCommonType() bool {
	commonTypes := []string{
		CommonProblemTypes.ValidationError,
		CommonProblemTypes.AuthenticationRequired,
		CommonProblemTypes.AuthorizationFailed,
		CommonProblemTypes.ResourceNotFound,
		CommonProblemTypes.ResourceConflict,
		CommonProblemTypes.RateLimitExceeded,
		CommonProblemTypes.ServiceUnavailable,
		CommonProblemTypes.InternalError,
	}

	for _, commonType := range commonTypes {
		if p.Type == commonType {
			return true
		}
	}
	return false
}

// IsDereferenceable checks if the type URI is likely dereferenceable (starts with http/https).
// This helps implement RFC9457's guidance on dereferenceable vs non-dereferenceable URIs.
func (p *RFC9457Error) IsDereferenceable() bool {
	return strings.HasPrefix(p.Type, "http://") || strings.HasPrefix(p.Type, "https://")
}

// MarshalJSON implements the json.Marshaler interface to include extensions in the JSON output.
// This maintains compatibility with RFC7807 while supporting RFC9457 improvements.
func (p *RFC9457Error) MarshalJSON() ([]byte, error) {
	type Alias RFC9457Error
	data, err := json.Marshal(&struct {
		*Alias
	}{
		Alias: (*Alias)(p),
	})
	if err != nil {
		return nil, err
	}

	if len(p.Extensions) == 0 {
		return data, nil
	}

	// Unmarshal the marshaled data into a map
	var result map[string]interface{}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	// Add extensions to the map
	for k, v := range p.Extensions {
		result[k] = v
	}

	// Marshal the map back to JSON
	return json.Marshal(result)
}

// Validate checks if the RFC9457Error follows RFC9457 best practices.
// Returns nil if valid, or an error describing validation issues.
func (p *RFC9457Error) Validate() error {
	var issues []string

	// Check required fields
	if p.Status == 0 {
		issues = append(issues, "status is required")
	}

	// Check status code validity
	if p.Status < 100 || p.Status >= 600 {
		issues = append(issues, "status must be a valid HTTP status code (100-599)")
	}

	// Check type URI format (basic validation)
	if p.Type != "" && p.Type != "about:blank" {
		if !strings.Contains(p.Type, ":") {
			issues = append(issues, "type must be a valid URI reference")
		}
	}

	if len(issues) > 0 {
		return fmt.Errorf("RFC9457Error validation failed: %s", strings.Join(issues, ", "))
	}

	return nil
}

// Helper functions for common HTTP error scenarios following RFC9457

// BadRequestProblem9457 creates a 400 Bad Request problem detail using RFC9457.
// If title is empty, it defaults to "Bad Request".
func BadRequestProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Bad Request"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusBadRequest, CommonProblemTypes.ValidationError, t, detail)
}

// UnauthorizedProblem9457 creates a 401 Unauthorized problem detail using RFC9457.
// If title is empty, it defaults to "Unauthorized".
func UnauthorizedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Unauthorized"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusUnauthorized, CommonProblemTypes.AuthenticationRequired, t, detail)
}

// PaymentRequiredProblem9457 creates a 402 Payment Required problem detail using RFC9457.
// If title is empty, it defaults to "Payment Required".
func PaymentRequiredProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Payment Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusPaymentRequired, t, detail)
}

// ForbiddenProblem9457 creates a 403 Forbidden problem detail using RFC9457.
// If title is empty, it defaults to "Forbidden".
func ForbiddenProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Forbidden"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusForbidden, CommonProblemTypes.AuthorizationFailed, t, detail)
}

// NotFoundProblem9457 creates a 404 Not Found problem detail using RFC9457.
// If title is empty, it defaults to "Not Found".
func NotFoundProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Not Found"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusNotFound, CommonProblemTypes.ResourceNotFound, t, detail)
}

// MethodNotAllowedProblem9457 creates a 405 Method Not Allowed problem detail using RFC9457.
// If title is empty, it defaults to "Method Not Allowed".
func MethodNotAllowedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Method Not Allowed"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusMethodNotAllowed, t, detail)
}

// NotAcceptableProblem9457 creates a 406 Not Acceptable problem detail using RFC9457.
// If title is empty, it defaults to "Not Acceptable".
func NotAcceptableProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Not Acceptable"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusNotAcceptable, t, detail)
}

// ProxyAuthRequiredProblem9457 creates a 407 Proxy Authentication Required problem detail using RFC9457.
// If title is empty, it defaults to "Proxy Authentication Required".
func ProxyAuthRequiredProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Proxy Authentication Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusProxyAuthRequired, t, detail)
}

// RequestTimeoutProblem9457 creates a 408 Request Timeout problem detail using RFC9457.
// If title is empty, it defaults to "Request Timeout".
func RequestTimeoutProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Request Timeout"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusRequestTimeout, t, detail)
}

// ConflictProblem9457 creates a 409 Conflict problem detail using RFC9457.
// If title is empty, it defaults to "Conflict".
func ConflictProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Conflict"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusConflict, CommonProblemTypes.ResourceConflict, t, detail)
}

// GoneProblem9457 creates a 410 Gone problem detail using RFC9457.
// If title is empty, it defaults to "Gone".
func GoneProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Gone"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusGone, t, detail)
}

// LengthRequiredProblem9457 creates a 411 Length Required problem detail using RFC9457.
// If title is empty, it defaults to "Length Required".
func LengthRequiredProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Length Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusLengthRequired, t, detail)
}

// PreconditionFailedProblem9457 creates a 412 Precondition Failed problem detail using RFC9457.
// If title is empty, it defaults to "Precondition Failed".
func PreconditionFailedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Precondition Failed"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusPreconditionFailed, t, detail)
}

// PayloadTooLargeProblem9457 creates a 413 Payload Too Large problem detail using RFC9457.
// If title is empty, it defaults to "Payload Too Large".
func PayloadTooLargeProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Payload Too Large"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusRequestEntityTooLarge, t, detail)
}

// URITooLongProblem9457 creates a 414 URI Too Long problem detail using RFC9457.
// If title is empty, it defaults to "URI Too Long".
func URITooLongProblem9457(detail string, title ...string) *RFC9457Error {
	t := "URI Too Long"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusRequestURITooLong, t, detail)
}

// UnsupportedMediaTypeProblem9457 creates a 415 Unsupported Media Type problem detail using RFC9457.
// If title is empty, it defaults to "Unsupported Media Type".
func UnsupportedMediaTypeProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Unsupported Media Type"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusUnsupportedMediaType, t, detail)
}

// RangeNotSatisfiableProblem9457 creates a 416 Range Not Satisfiable problem detail using RFC9457.
// If title is empty, it defaults to "Range Not Satisfiable".
func RangeNotSatisfiableProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Range Not Satisfiable"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusRequestedRangeNotSatisfiable, t, detail)
}

// ExpectationFailedProblem9457 creates a 417 Expectation Failed problem detail using RFC9457.
// If title is empty, it defaults to "Expectation Failed".
func ExpectationFailedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Expectation Failed"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusExpectationFailed, t, detail)
}

// MisdirectedRequestProblem9457 creates a 421 Misdirected Request problem detail using RFC9457.
// If title is empty, it defaults to "Misdirected Request".
func MisdirectedRequestProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Misdirected Request"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusMisdirectedRequest, t, detail)
}

// UnprocessableEntityProblem9457 creates a 422 Unprocessable Entity problem detail using RFC9457.
// If title is empty, it defaults to "Unprocessable Entity".
func UnprocessableEntityProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Unprocessable Entity"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusUnprocessableEntity, CommonProblemTypes.ValidationError, t, detail)
}

// LockedProblem9457 creates a 423 Locked problem detail using RFC9457.
// If title is empty, it defaults to "Locked".
func LockedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Locked"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusLocked, t, detail)
}

// FailedDependencyProblem9457 creates a 424 Failed Dependency problem detail using RFC9457.
// If title is empty, it defaults to "Failed Dependency".
func FailedDependencyProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Failed Dependency"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusFailedDependency, t, detail)
}

// UpgradeRequiredProblem9457 creates a 426 Upgrade Required problem detail using RFC9457.
// If title is empty, it defaults to "Upgrade Required".
func UpgradeRequiredProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Upgrade Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusUpgradeRequired, t, detail)
}

// PreconditionRequiredProblem9457 creates a 428 Precondition Required problem detail using RFC9457.
// If title is empty, it defaults to "Precondition Required".
func PreconditionRequiredProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Precondition Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusPreconditionRequired, t, detail)
}

// TooManyRequestsProblem9457 creates a 429 Too Many Requests problem detail using RFC9457.
// If title is empty, it defaults to "Too Many Requests".
func TooManyRequestsProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Too Many Requests"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusTooManyRequests, CommonProblemTypes.RateLimitExceeded, t, detail)
}

// RequestHeaderFieldsTooLargeProblem9457 creates a 431 Request Header Fields Too Large problem detail using RFC9457.
// If title is empty, it defaults to "Request Header Fields Too Large".
func RequestHeaderFieldsTooLargeProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Request Header Fields Too Large"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusRequestHeaderFieldsTooLarge, t, detail)
}

// UnavailableForLegalReasonsProblem9457 creates a 451 Unavailable For Legal Reasons problem detail using RFC9457.
// If title is empty, it defaults to "Unavailable For Legal Reasons".
func UnavailableForLegalReasonsProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Unavailable For Legal Reasons"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusUnavailableForLegalReasons, t, detail)
}

// InternalServerErrorProblem9457 creates a 500 Internal Server Error problem detail using RFC9457.
// If title is empty, it defaults to "Internal Server Error".
func InternalServerErrorProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Internal Server Error"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusInternalServerError, CommonProblemTypes.InternalError, t, detail)
}

// NotImplementedProblem9457 creates a 501 Not Implemented problem detail using RFC9457.
// If title is empty, it defaults to "Not Implemented".
func NotImplementedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Not Implemented"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusNotImplemented, t, detail)
}

// BadGatewayProblem9457 creates a 502 Bad Gateway problem detail using RFC9457.
// If title is empty, it defaults to "Bad Gateway".
func BadGatewayProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Bad Gateway"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusBadGateway, t, detail)
}

// ServiceUnavailableProblem9457 creates a 503 Service Unavailable problem detail using RFC9457.
// If title is empty, it defaults to "Service Unavailable".
func ServiceUnavailableProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Service Unavailable"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457ErrorWithType(http.StatusServiceUnavailable, CommonProblemTypes.ServiceUnavailable, t, detail)
}

// GatewayTimeoutProblem9457 creates a 504 Gateway Timeout problem detail using RFC9457.
// If title is empty, it defaults to "Gateway Timeout".
func GatewayTimeoutProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Gateway Timeout"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusGatewayTimeout, t, detail)
}

// HTTPVersionNotSupportedProblem9457 creates a 505 HTTP Version Not Supported problem detail using RFC9457.
// If title is empty, it defaults to "HTTP Version Not Supported".
func HTTPVersionNotSupportedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "HTTP Version Not Supported"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusHTTPVersionNotSupported, t, detail)
}

// VariantAlsoNegotiatesProblem9457 creates a 506 Variant Also Negotiates problem detail using RFC9457.
// If title is empty, it defaults to "Variant Also Negotiates".
func VariantAlsoNegotiatesProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Variant Also Negotiates"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusVariantAlsoNegotiates, t, detail)
}

// InsufficientStorageProblem9457 creates a 507 Insufficient Storage problem detail using RFC9457.
// If title is empty, it defaults to "Insufficient Storage".
func InsufficientStorageProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Insufficient Storage"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusInsufficientStorage, t, detail)
}

// LoopDetectedProblem9457 creates a 508 Loop Detected problem detail using RFC9457.
// If title is empty, it defaults to "Loop Detected".
func LoopDetectedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Loop Detected"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusLoopDetected, t, detail)
}

// NotExtendedProblem9457 creates a 510 Not Extended problem detail using RFC9457.
// If title is empty, it defaults to "Not Extended".
func NotExtendedProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Not Extended"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusNotExtended, t, detail)
}

// NetworkAuthenticationRequiredProblem9457 creates a 511 Network Authentication Required problem detail using RFC9457.
// If title is empty, it defaults to "Network Authentication Required".
func NetworkAuthenticationRequiredProblem9457(detail string, title ...string) *RFC9457Error {
	t := "Network Authentication Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC9457Error(http.StatusNetworkAuthenticationRequired, t, detail)
}

// ToHttpError converts the RFC9457Error to an HttpError with JSON representation of the problem.
// The resulting HttpError will have the content type set to "application/problem+json".
func (p *RFC9457Error) ToHttpError() *HttpError {
	const contentType = "application/problem+json"
	jsonBytes, err := json.Marshal(p)
	if err != nil {
		// If marshaling fails, fall back to just using the detail
		return New(p.Status, p.Detail, "text/plain")
	}
	return New(p.Status, string(jsonBytes), contentType)
}

// ToRFC7807Error converts a RFC9457Error to a RFC7807Error for backward compatibility.
// This is useful when you need to support legacy systems that expect RFC7807 format.
func (p *RFC9457Error) ToRFC7807Error() *RFC7807Error {
	rfc7807 := &RFC7807Error{
		Type:       p.Type,
		Title:      p.Title,
		Status:     p.Status,
		Detail:     p.Detail,
		Instance:   p.Instance,
		Extensions: make(map[string]interface{}),
	}

	// Copy extensions
	for k, v := range p.Extensions {
		rfc7807.Extensions[k] = v
	}

	return rfc7807
}
