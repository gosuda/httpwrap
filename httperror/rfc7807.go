package httperror

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// RFC7807Error represents a Problem Details for HTTP APIs as defined in RFC7807.
// It provides a standardized way to describe the details of a problem that
// occurred during an HTTP request.
//
// The RFC7807 standard defines a problem details object with the following fields:
// - Type: A URI reference that identifies the problem type
// - Title: A short, human-readable summary of the problem type
// - Status: The HTTP status code generated by the origin server
// - Detail: A human-readable explanation specific to this occurrence of the problem
// - Instance: A URI reference that identifies the specific occurrence of the problem
//
// See: https://tools.ietf.org/html/rfc7807
type RFC7807Error struct {
	// Type is a URI reference that identifies the problem type.
	// When dereferenced, it SHOULD provide human-readable documentation for the problem type.
	// When this member is not present, its value is assumed to be "about:blank".
	Type string `json:"type,omitempty"`

	// Title is a short, human-readable summary of the problem type.
	// It SHOULD NOT change from occurrence to occurrence of the problem,
	// except for purposes of localization.
	Title string `json:"title,omitempty"`

	// Status is the HTTP status code generated by the origin server for this occurrence of the problem.
	Status int `json:"status,omitempty"`

	// Detail is a human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail,omitempty"`

	// Instance is a URI reference that identifies the specific occurrence of the problem.
	// It may or may not yield further information if dereferenced.
	Instance string `json:"instance,omitempty"`

	// Extensions is a map of additional members that provide information about the problem.
	// These can be application-specific or extended members from other specifications.
	Extensions map[string]interface{} `json:"-"`
}

// NewRFC7807Error creates a new RFC7807Error with the given status, title, and detail.
//   - status: The HTTP status code generated by the origin server for this occurrence of the problem.
//   - title: A short, human-readable summary of the problem type. It should not change from
//     occurrence to occurrence of the problem, except for purposes of localization.
//   - detail: A human-readable explanation specific to this occurrence of the problem,
//     providing more detailed information than the title.
func NewRFC7807Error(status int, title, detail string) *RFC7807Error {
	return &RFC7807Error{
		Type:   "about:blank", // Default type as per RFC7807
		Title:  title,
		Status: status,
		Detail: detail,
	}
}

// WithType sets the Type field of the RFC7807Error and returns the RFC7807Error.
// The Type field is a URI reference that identifies the problem type.
// When dereferenced, it SHOULD provide human-readable documentation for the problem type.
// According to RFC7807, when this field is not set, its value is assumed to be "about:blank".
// Example Type values:
// - "https://example.com/probs/out-of-credit"
// - "https://api.example.org/errors/insufficient-funds"
func (p *RFC7807Error) WithType(typeURI string) *RFC7807Error {
	p.Type = typeURI
	return p
}

// WithInstance sets the Instance field of the RFC7807Error and returns the RFC7807Error.
// The Instance field is a URI reference that identifies the specific occurrence of the problem.
// It may or may not yield further information if dereferenced.
// This field can be used to distinguish between multiple occurrences of the same type of error.
// Example Instance values:
// - "https://example.com/accounts/12345/msgs/abc"
// - "/api/transactions/12345"
// - "urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66"
func (p *RFC7807Error) WithInstance(instance string) *RFC7807Error {
	p.Instance = instance
	return p
}

// WithExtension adds an extension property to the RFC7807Error and returns the RFC7807Error.
// Extensions are additional members that provide information about the problem.
// These can be application-specific or extended members from other specifications.
// RFC7807 allows for extension members to be included in the problem details object.
// They will be serialized in the JSON output alongside the standard fields.
// Example extensions:
// - "balance" (remaining account balance)
// - "accounts" (array of affected account numbers)
// - "retry-after" (time to wait before retrying)
// - "trace-id" (for debugging and tracking)
func (p *RFC7807Error) WithExtension(key string, value interface{}) *RFC7807Error {
	if p.Extensions == nil {
		p.Extensions = make(map[string]interface{})
	}
	p.Extensions[key] = value
	return p
}

// Error returns a string representation of the problem detail, implementing the error interface.
func (p *RFC7807Error) Error() string {
	return fmt.Sprintf("%d: %s - %s", p.Status, p.Title, p.Detail)
}

// StatusCode returns the HTTP status code of the problem detail.
func (p *RFC7807Error) StatusCode() int {
	return p.Status
}

// ErrorMessage returns the detail message of the problem detail.
func (p *RFC7807Error) ErrorMessage() string {
	return p.Detail
}

// MarshalJSON implements the json.Marshaler interface to include extensions in the JSON output.
func (p *RFC7807Error) MarshalJSON() ([]byte, error) {
	type Alias RFC7807Error
	data, err := json.Marshal(&struct {
		*Alias
	}{
		Alias: (*Alias)(p),
	})
	if err != nil {
		return nil, err
	}

	if len(p.Extensions) == 0 {
		return data, nil
	}

	// Unmarshal the marshaled data into a map
	var result map[string]interface{}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	// Add extensions to the map
	for k, v := range p.Extensions {
		result[k] = v
	}

	// Marshal the map back to JSON
	return json.Marshal(result)
}

// BadRequestProblem7807 creates a 400 Bad Request problem detail.
// If title is empty, it defaults to "Bad Request".
func BadRequestProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Bad Request"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusBadRequest, t, detail)
}

// UnauthorizedProblem7807 creates a 401 Unauthorized problem detail.
// If title is empty, it defaults to "Unauthorized".
func UnauthorizedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Unauthorized"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusUnauthorized, t, detail)
}

// PaymentRequiredProblem7807 creates a 402 Payment Required problem detail.
// If title is empty, it defaults to "Payment Required".
func PaymentRequiredProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Payment Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusPaymentRequired, t, detail)
}

// ForbiddenProblem7807 creates a 403 Forbidden problem detail.
// If title is empty, it defaults to "Forbidden".
func ForbiddenProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Forbidden"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusForbidden, t, detail)
}

// NotFoundProblem7807 creates a 404 Not Found problem detail.
// If title is empty, it defaults to "Not Found".
func NotFoundProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Not Found"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusNotFound, t, detail)
}

// MethodNotAllowedProblem7807 creates a 405 Method Not Allowed problem detail.
// If title is empty, it defaults to "Method Not Allowed".
func MethodNotAllowedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Method Not Allowed"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusMethodNotAllowed, t, detail)
}

// NotAcceptableProblem7807 creates a 406 Not Acceptable problem detail.
// If title is empty, it defaults to "Not Acceptable".
func NotAcceptableProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Not Acceptable"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusNotAcceptable, t, detail)
}

// ProxyAuthRequiredProblem7807 creates a 407 Proxy Authentication Required problem detail.
// If title is empty, it defaults to "Proxy Authentication Required".
func ProxyAuthRequiredProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Proxy Authentication Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusProxyAuthRequired, t, detail)
}

// RequestTimeoutProblem7807 creates a 408 Request Timeout problem detail.
// If title is empty, it defaults to "Request Timeout".
func RequestTimeoutProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Request Timeout"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusRequestTimeout, t, detail)
}

// ConflictProblem7807 creates a 409 Conflict problem detail.
// If title is empty, it defaults to "Conflict".
func ConflictProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Conflict"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusConflict, t, detail)
}

// GoneProblem7807 creates a 410 Gone problem detail.
// If title is empty, it defaults to "Gone".
func GoneProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Gone"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusGone, t, detail)
}

// LengthRequiredProblem7807 creates a 411 Length Required problem detail.
// If title is empty, it defaults to "Length Required".
func LengthRequiredProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Length Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusLengthRequired, t, detail)
}

// PreconditionFailedProblem7807 creates a 412 Precondition Failed problem detail.
// If title is empty, it defaults to "Precondition Failed".
func PreconditionFailedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Precondition Failed"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusPreconditionFailed, t, detail)
}

// PayloadTooLargeProblem7807 creates a 413 Payload Too Large problem detail.
// If title is empty, it defaults to "Payload Too Large".
func PayloadTooLargeProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Payload Too Large"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusRequestEntityTooLarge, t, detail)
}

// URITooLongProblem7807 creates a 414 URI Too Long problem detail.
// If title is empty, it defaults to "URI Too Long".
func URITooLongProblem7807(detail string, title ...string) *RFC7807Error {
	t := "URI Too Long"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusRequestURITooLong, t, detail)
}

// UnsupportedMediaTypeProblem7807 creates a 415 Unsupported Media Type problem detail.
// If title is empty, it defaults to "Unsupported Media Type".
func UnsupportedMediaTypeProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Unsupported Media Type"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusUnsupportedMediaType, t, detail)
}

// RangeNotSatisfiableProblem7807 creates a 416 Range Not Satisfiable problem detail.
// If title is empty, it defaults to "Range Not Satisfiable".
func RangeNotSatisfiableProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Range Not Satisfiable"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusRequestedRangeNotSatisfiable, t, detail)
}

// ExpectationFailedProblem7807 creates a 417 Expectation Failed problem detail.
// If title is empty, it defaults to "Expectation Failed".
func ExpectationFailedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Expectation Failed"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusExpectationFailed, t, detail)
}

// MisdirectedRequestProblem7807 creates a 421 Misdirected Request problem detail.
// If title is empty, it defaults to "Misdirected Request".
func MisdirectedRequestProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Misdirected Request"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusMisdirectedRequest, t, detail)
}

// LockedProblem7807 creates a 423 Locked problem detail.
// If title is empty, it defaults to "Locked".
func LockedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Locked"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusLocked, t, detail)
}

// FailedDependencyProblem7807 creates a 424 Failed Dependency problem detail.
// If title is empty, it defaults to "Failed Dependency".
func FailedDependencyProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Failed Dependency"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusFailedDependency, t, detail)
}

// UpgradeRequiredProblem7807 creates a 426 Upgrade Required problem detail.
// If title is empty, it defaults to "Upgrade Required".
func UpgradeRequiredProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Upgrade Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusUpgradeRequired, t, detail)
}

// PreconditionRequiredProblem7807 creates a 428 Precondition Required problem detail.
// If title is empty, it defaults to "Precondition Required".
func PreconditionRequiredProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Precondition Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusPreconditionRequired, t, detail)
}

// TooManyRequestsProblem7807 creates a 429 Too Many Requests problem detail.
// If title is empty, it defaults to "Too Many Requests".
func TooManyRequestsProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Too Many Requests"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusTooManyRequests, t, detail)
}

// RequestHeaderFieldsTooLargeProblem7807 creates a 431 Request Header Fields Too Large problem detail.
// If title is empty, it defaults to "Request Header Fields Too Large".
func RequestHeaderFieldsTooLargeProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Request Header Fields Too Large"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusRequestHeaderFieldsTooLarge, t, detail)
}

// UnavailableForLegalReasonsProblem7807 creates a 451 Unavailable For Legal Reasons problem detail.
// If title is empty, it defaults to "Unavailable For Legal Reasons".
func UnavailableForLegalReasonsProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Unavailable For Legal Reasons"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusUnavailableForLegalReasons, t, detail)
}

// NotImplementedProblem7807 creates a 501 Not Implemented problem detail.
// If title is empty, it defaults to "Not Implemented".
func NotImplementedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Not Implemented"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusNotImplemented, t, detail)
}

// BadGatewayProblem7807 creates a 502 Bad Gateway problem detail.
// If title is empty, it defaults to "Bad Gateway".
func BadGatewayProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Bad Gateway"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusBadGateway, t, detail)
}

// GatewayTimeoutProblem7807 creates a 504 Gateway Timeout problem detail.
// If title is empty, it defaults to "Gateway Timeout".
func GatewayTimeoutProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Gateway Timeout"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusGatewayTimeout, t, detail)
}

// HTTPVersionNotSupportedProblem7807 creates a 505 HTTP Version Not Supported problem detail.
// If title is empty, it defaults to "HTTP Version Not Supported".
func HTTPVersionNotSupportedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "HTTP Version Not Supported"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusHTTPVersionNotSupported, t, detail)
}

// VariantAlsoNegotiatesProblem7807 creates a 506 Variant Also Negotiates problem detail.
// If title is empty, it defaults to "Variant Also Negotiates".
func VariantAlsoNegotiatesProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Variant Also Negotiates"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusVariantAlsoNegotiates, t, detail)
}

// InsufficientStorageProblem7807 creates a 507 Insufficient Storage problem detail.
// If title is empty, it defaults to "Insufficient Storage".
func InsufficientStorageProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Insufficient Storage"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusInsufficientStorage, t, detail)
}

// LoopDetectedProblem7807 creates a 508 Loop Detected problem detail.
// If title is empty, it defaults to "Loop Detected".
func LoopDetectedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Loop Detected"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusLoopDetected, t, detail)
}

// NotExtendedProblem7807 creates a 510 Not Extended problem detail.
// If title is empty, it defaults to "Not Extended".
func NotExtendedProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Not Extended"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusNotExtended, t, detail)
}

// NetworkAuthenticationRequiredProblem7807 creates a 511 Network Authentication Required problem detail.
// If title is empty, it defaults to "Network Authentication Required".
func NetworkAuthenticationRequiredProblem7807(detail string, title ...string) *RFC7807Error {
	t := "Network Authentication Required"
	if len(title) > 0 && title[0] != "" {
		t = title[0]
	}
	return NewRFC7807Error(http.StatusNetworkAuthenticationRequired, t, detail)
}

// ToHttpError converts a RFC7807Error to an HttpError with JSON representation of the problem.
func (p *RFC7807Error) ToHttpError() *HttpError {
	jsonBytes, err := json.Marshal(p)
	if err != nil {
		// If marshaling fails, fall back to just using the detail
		return New(p.Status, p.Detail)
	}
	return New(p.Status, string(jsonBytes))
}
